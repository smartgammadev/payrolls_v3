<?php
/**
 * Customer
 *
 * PHP version 5
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EvoliaApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EvoliaV3\Model;

use \ArrayAccess;
use \EvoliaV3\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Customer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'matricule' => 'string',
'nom' => 'string',
'nom_court' => 'string',
'ordre_client' => 'int',
'designation' => 'string',
'adresse1' => 'string',
'cp' => 'string',
'commune' => 'string',
'pays' => 'string',
'telephone' => 'string',
'email' => 'string',
'ape' => 'string',
'siren' => 'string',
'nic' => 'string',
'liste_agences' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'matricule' => null,
'nom' => null,
'nom_court' => null,
'ordre_client' => 'int32',
'designation' => null,
'adresse1' => null,
'cp' => null,
'commune' => null,
'pays' => null,
'telephone' => null,
'email' => null,
'ape' => null,
'siren' => null,
'nic' => null,
'liste_agences' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'matricule' => 'matricule',
'nom' => 'nom',
'nom_court' => 'nomCourt',
'ordre_client' => 'ordreClient',
'designation' => 'designation',
'adresse1' => 'adresse1',
'cp' => 'cp',
'commune' => 'commune',
'pays' => 'pays',
'telephone' => 'telephone',
'email' => 'email',
'ape' => 'ape',
'siren' => 'siren',
'nic' => 'nic',
'liste_agences' => 'listeAgences'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'matricule' => 'setMatricule',
'nom' => 'setNom',
'nom_court' => 'setNomCourt',
'ordre_client' => 'setOrdreClient',
'designation' => 'setDesignation',
'adresse1' => 'setAdresse1',
'cp' => 'setCp',
'commune' => 'setCommune',
'pays' => 'setPays',
'telephone' => 'setTelephone',
'email' => 'setEmail',
'ape' => 'setApe',
'siren' => 'setSiren',
'nic' => 'setNic',
'liste_agences' => 'setListeAgences'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'matricule' => 'getMatricule',
'nom' => 'getNom',
'nom_court' => 'getNomCourt',
'ordre_client' => 'getOrdreClient',
'designation' => 'getDesignation',
'adresse1' => 'getAdresse1',
'cp' => 'getCp',
'commune' => 'getCommune',
'pays' => 'getPays',
'telephone' => 'getTelephone',
'email' => 'getEmail',
'ape' => 'getApe',
'siren' => 'getSiren',
'nic' => 'getNic',
'liste_agences' => 'getListeAgences'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['matricule'] = isset($data['matricule']) ? $data['matricule'] : null;
        $this->container['nom'] = isset($data['nom']) ? $data['nom'] : null;
        $this->container['nom_court'] = isset($data['nom_court']) ? $data['nom_court'] : null;
        $this->container['ordre_client'] = isset($data['ordre_client']) ? $data['ordre_client'] : null;
        $this->container['designation'] = isset($data['designation']) ? $data['designation'] : null;
        $this->container['adresse1'] = isset($data['adresse1']) ? $data['adresse1'] : null;
        $this->container['cp'] = isset($data['cp']) ? $data['cp'] : null;
        $this->container['commune'] = isset($data['commune']) ? $data['commune'] : null;
        $this->container['pays'] = isset($data['pays']) ? $data['pays'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['ape'] = isset($data['ape']) ? $data['ape'] : null;
        $this->container['siren'] = isset($data['siren']) ? $data['siren'] : null;
        $this->container['nic'] = isset($data['nic']) ? $data['nic'] : null;
        $this->container['liste_agences'] = isset($data['liste_agences']) ? $data['liste_agences'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets matricule
     *
     * @return string
     */
    public function getMatricule()
    {
        return $this->container['matricule'];
    }

    /**
     * Sets matricule
     *
     * @param string $matricule matricule
     *
     * @return $this
     */
    public function setMatricule($matricule)
    {
        $this->container['matricule'] = $matricule;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string $nom nom
     *
     * @return $this
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets nom_court
     *
     * @return string
     */
    public function getNomCourt()
    {
        return $this->container['nom_court'];
    }

    /**
     * Sets nom_court
     *
     * @param string $nom_court nom_court
     *
     * @return $this
     */
    public function setNomCourt($nom_court)
    {
        $this->container['nom_court'] = $nom_court;

        return $this;
    }

    /**
     * Gets ordre_client
     *
     * @return int
     */
    public function getOrdreClient()
    {
        return $this->container['ordre_client'];
    }

    /**
     * Sets ordre_client
     *
     * @param int $ordre_client ordre_client
     *
     * @return $this
     */
    public function setOrdreClient($ordre_client)
    {
        $this->container['ordre_client'] = $ordre_client;

        return $this;
    }

    /**
     * Gets designation
     *
     * @return string
     */
    public function getDesignation()
    {
        return $this->container['designation'];
    }

    /**
     * Sets designation
     *
     * @param string $designation designation
     *
     * @return $this
     */
    public function setDesignation($designation)
    {
        $this->container['designation'] = $designation;

        return $this;
    }

    /**
     * Gets adresse1
     *
     * @return string
     */
    public function getAdresse1()
    {
        return $this->container['adresse1'];
    }

    /**
     * Sets adresse1
     *
     * @param string $adresse1 adresse1
     *
     * @return $this
     */
    public function setAdresse1($adresse1)
    {
        $this->container['adresse1'] = $adresse1;

        return $this;
    }

    /**
     * Gets cp
     *
     * @return string
     */
    public function getCp()
    {
        return $this->container['cp'];
    }

    /**
     * Sets cp
     *
     * @param string $cp cp
     *
     * @return $this
     */
    public function setCp($cp)
    {
        $this->container['cp'] = $cp;

        return $this;
    }

    /**
     * Gets commune
     *
     * @return string
     */
    public function getCommune()
    {
        return $this->container['commune'];
    }

    /**
     * Sets commune
     *
     * @param string $commune commune
     *
     * @return $this
     */
    public function setCommune($commune)
    {
        $this->container['commune'] = $commune;

        return $this;
    }

    /**
     * Gets pays
     *
     * @return string
     */
    public function getPays()
    {
        return $this->container['pays'];
    }

    /**
     * Sets pays
     *
     * @param string $pays pays
     *
     * @return $this
     */
    public function setPays($pays)
    {
        $this->container['pays'] = $pays;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ape
     *
     * @return string
     */
    public function getApe()
    {
        return $this->container['ape'];
    }

    /**
     * Sets ape
     *
     * @param string $ape ape
     *
     * @return $this
     */
    public function setApe($ape)
    {
        $this->container['ape'] = $ape;

        return $this;
    }

    /**
     * Gets siren
     *
     * @return string
     */
    public function getSiren()
    {
        return $this->container['siren'];
    }

    /**
     * Sets siren
     *
     * @param string $siren siren
     *
     * @return $this
     */
    public function setSiren($siren)
    {
        $this->container['siren'] = $siren;

        return $this;
    }

    /**
     * Gets nic
     *
     * @return string
     */
    public function getNic()
    {
        return $this->container['nic'];
    }

    /**
     * Sets nic
     *
     * @param string $nic nic
     *
     * @return $this
     */
    public function setNic($nic)
    {
        $this->container['nic'] = $nic;

        return $this;
    }

    /**
     * Gets liste_agences
     *
     * @return string[]
     */
    public function getListeAgences()
    {
        return $this->container['liste_agences'];
    }

    /**
     * Sets liste_agences
     *
     * @param string[] $liste_agences liste_agences
     *
     * @return $this
     */
    public function setListeAgences($liste_agences)
    {
        $this->container['liste_agences'] = $liste_agences;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
