<?php
/**
 * MissionPlace
 *
 * PHP version 5
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EvoliaApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EvoliaV3\Model;

use \ArrayAccess;
use \EvoliaV3\ObjectSerializer;

/**
 * MissionPlace Class Doc Comment
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MissionPlace implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MissionPlace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'designation' => 'string',
'adresse1' => 'string',
'cp' => 'string',
'commune' => 'string',
'insee' => 'string',
'pays' => 'string',
'telephone' => 'string',
'ape' => 'string',
'siren' => 'string',
'nic' => 'string',
'tva_pays' => 'string',
'tva_clef' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'designation' => null,
'adresse1' => null,
'cp' => null,
'commune' => null,
'insee' => null,
'pays' => null,
'telephone' => null,
'ape' => null,
'siren' => null,
'nic' => null,
'tva_pays' => null,
'tva_clef' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'designation' => 'designation',
'adresse1' => 'adresse1',
'cp' => 'cp',
'commune' => 'commune',
'insee' => 'insee',
'pays' => 'pays',
'telephone' => 'telephone',
'ape' => 'ape',
'siren' => 'siren',
'nic' => 'nic',
'tva_pays' => 'tvaPays',
'tva_clef' => 'tvaClef'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'designation' => 'setDesignation',
'adresse1' => 'setAdresse1',
'cp' => 'setCp',
'commune' => 'setCommune',
'insee' => 'setInsee',
'pays' => 'setPays',
'telephone' => 'setTelephone',
'ape' => 'setApe',
'siren' => 'setSiren',
'nic' => 'setNic',
'tva_pays' => 'setTvaPays',
'tva_clef' => 'setTvaClef'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'designation' => 'getDesignation',
'adresse1' => 'getAdresse1',
'cp' => 'getCp',
'commune' => 'getCommune',
'insee' => 'getInsee',
'pays' => 'getPays',
'telephone' => 'getTelephone',
'ape' => 'getApe',
'siren' => 'getSiren',
'nic' => 'getNic',
'tva_pays' => 'getTvaPays',
'tva_clef' => 'getTvaClef'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['designation'] = isset($data['designation']) ? $data['designation'] : null;
        $this->container['adresse1'] = isset($data['adresse1']) ? $data['adresse1'] : null;
        $this->container['cp'] = isset($data['cp']) ? $data['cp'] : null;
        $this->container['commune'] = isset($data['commune']) ? $data['commune'] : null;
        $this->container['insee'] = isset($data['insee']) ? $data['insee'] : null;
        $this->container['pays'] = isset($data['pays']) ? $data['pays'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['ape'] = isset($data['ape']) ? $data['ape'] : null;
        $this->container['siren'] = isset($data['siren']) ? $data['siren'] : null;
        $this->container['nic'] = isset($data['nic']) ? $data['nic'] : null;
        $this->container['tva_pays'] = isset($data['tva_pays']) ? $data['tva_pays'] : null;
        $this->container['tva_clef'] = isset($data['tva_clef']) ? $data['tva_clef'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets designation
     *
     * @return string
     */
    public function getDesignation()
    {
        return $this->container['designation'];
    }

    /**
     * Sets designation
     *
     * @param string $designation designation
     *
     * @return $this
     */
    public function setDesignation($designation)
    {
        $this->container['designation'] = $designation;

        return $this;
    }

    /**
     * Gets adresse1
     *
     * @return string
     */
    public function getAdresse1()
    {
        return $this->container['adresse1'];
    }

    /**
     * Sets adresse1
     *
     * @param string $adresse1 adresse1
     *
     * @return $this
     */
    public function setAdresse1($adresse1)
    {
        $this->container['adresse1'] = $adresse1;

        return $this;
    }

    /**
     * Gets cp
     *
     * @return string
     */
    public function getCp()
    {
        return $this->container['cp'];
    }

    /**
     * Sets cp
     *
     * @param string $cp cp
     *
     * @return $this
     */
    public function setCp($cp)
    {
        $this->container['cp'] = $cp;

        return $this;
    }

    /**
     * Gets commune
     *
     * @return string
     */
    public function getCommune()
    {
        return $this->container['commune'];
    }

    /**
     * Sets commune
     *
     * @param string $commune commune
     *
     * @return $this
     */
    public function setCommune($commune)
    {
        $this->container['commune'] = $commune;

        return $this;
    }

    /**
     * Gets insee
     *
     * @return string
     */
    public function getInsee()
    {
        return $this->container['insee'];
    }

    /**
     * Sets insee
     *
     * @param string $insee insee
     *
     * @return $this
     */
    public function setInsee($insee)
    {
        $this->container['insee'] = $insee;

        return $this;
    }

    /**
     * Gets pays
     *
     * @return string
     */
    public function getPays()
    {
        return $this->container['pays'];
    }

    /**
     * Sets pays
     *
     * @param string $pays pays
     *
     * @return $this
     */
    public function setPays($pays)
    {
        $this->container['pays'] = $pays;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets ape
     *
     * @return string
     */
    public function getApe()
    {
        return $this->container['ape'];
    }

    /**
     * Sets ape
     *
     * @param string $ape ape
     *
     * @return $this
     */
    public function setApe($ape)
    {
        $this->container['ape'] = $ape;

        return $this;
    }

    /**
     * Gets siren
     *
     * @return string
     */
    public function getSiren()
    {
        return $this->container['siren'];
    }

    /**
     * Sets siren
     *
     * @param string $siren siren
     *
     * @return $this
     */
    public function setSiren($siren)
    {
        $this->container['siren'] = $siren;

        return $this;
    }

    /**
     * Gets nic
     *
     * @return string
     */
    public function getNic()
    {
        return $this->container['nic'];
    }

    /**
     * Sets nic
     *
     * @param string $nic nic
     *
     * @return $this
     */
    public function setNic($nic)
    {
        $this->container['nic'] = $nic;

        return $this;
    }

    /**
     * Gets tva_pays
     *
     * @return string
     */
    public function getTvaPays()
    {
        return $this->container['tva_pays'];
    }

    /**
     * Sets tva_pays
     *
     * @param string $tva_pays tva_pays
     *
     * @return $this
     */
    public function setTvaPays($tva_pays)
    {
        $this->container['tva_pays'] = $tva_pays;

        return $this;
    }

    /**
     * Gets tva_clef
     *
     * @return string
     */
    public function getTvaClef()
    {
        return $this->container['tva_clef'];
    }

    /**
     * Sets tva_clef
     *
     * @param string $tva_clef tva_clef
     *
     * @return $this
     */
    public function setTvaClef($tva_clef)
    {
        $this->container['tva_clef'] = $tva_clef;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
