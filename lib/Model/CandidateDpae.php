<?php
/**
 * CandidateDpae
 *
 * PHP version 5
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EvoliaApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EvoliaV3\Model;

use \ArrayAccess;
use \EvoliaV3\ObjectSerializer;

/**
 * CandidateDpae Class Doc Comment
 *
 * @category Class
 * @package  EvoliaV3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CandidateDpae implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CandidateDpae';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ref_candidate' => 'string',
'ref_mission' => 'string',
'agence' => 'string',
'date_heure_prevue_embauche' => '\DateTime',
'num_dpae' => 'string',
'date_envoi' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ref_candidate' => null,
'ref_mission' => null,
'agence' => null,
'date_heure_prevue_embauche' => 'date-time',
'num_dpae' => null,
'date_envoi' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ref_candidate' => 'refCandidate',
'ref_mission' => 'refMission',
'agence' => 'agence',
'date_heure_prevue_embauche' => 'dateHeurePrevueEmbauche',
'num_dpae' => 'numDpae',
'date_envoi' => 'dateEnvoi'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ref_candidate' => 'setRefCandidate',
'ref_mission' => 'setRefMission',
'agence' => 'setAgence',
'date_heure_prevue_embauche' => 'setDateHeurePrevueEmbauche',
'num_dpae' => 'setNumDpae',
'date_envoi' => 'setDateEnvoi'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ref_candidate' => 'getRefCandidate',
'ref_mission' => 'getRefMission',
'agence' => 'getAgence',
'date_heure_prevue_embauche' => 'getDateHeurePrevueEmbauche',
'num_dpae' => 'getNumDpae',
'date_envoi' => 'getDateEnvoi'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ref_candidate'] = isset($data['ref_candidate']) ? $data['ref_candidate'] : null;
        $this->container['ref_mission'] = isset($data['ref_mission']) ? $data['ref_mission'] : null;
        $this->container['agence'] = isset($data['agence']) ? $data['agence'] : null;
        $this->container['date_heure_prevue_embauche'] = isset($data['date_heure_prevue_embauche']) ? $data['date_heure_prevue_embauche'] : null;
        $this->container['num_dpae'] = isset($data['num_dpae']) ? $data['num_dpae'] : null;
        $this->container['date_envoi'] = isset($data['date_envoi']) ? $data['date_envoi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ref_candidate
     *
     * @return string
     */
    public function getRefCandidate()
    {
        return $this->container['ref_candidate'];
    }

    /**
     * Sets ref_candidate
     *
     * @param string $ref_candidate ref_candidate
     *
     * @return $this
     */
    public function setRefCandidate($ref_candidate)
    {
        $this->container['ref_candidate'] = $ref_candidate;

        return $this;
    }

    /**
     * Gets ref_mission
     *
     * @return string
     */
    public function getRefMission()
    {
        return $this->container['ref_mission'];
    }

    /**
     * Sets ref_mission
     *
     * @param string $ref_mission ref_mission
     *
     * @return $this
     */
    public function setRefMission($ref_mission)
    {
        $this->container['ref_mission'] = $ref_mission;

        return $this;
    }

    /**
     * Gets agence
     *
     * @return string
     */
    public function getAgence()
    {
        return $this->container['agence'];
    }

    /**
     * Sets agence
     *
     * @param string $agence agence
     *
     * @return $this
     */
    public function setAgence($agence)
    {
        $this->container['agence'] = $agence;

        return $this;
    }

    /**
     * Gets date_heure_prevue_embauche
     *
     * @return \DateTime
     */
    public function getDateHeurePrevueEmbauche()
    {
        return $this->container['date_heure_prevue_embauche'];
    }

    /**
     * Sets date_heure_prevue_embauche
     *
     * @param \DateTime $date_heure_prevue_embauche date_heure_prevue_embauche
     *
     * @return $this
     */
    public function setDateHeurePrevueEmbauche($date_heure_prevue_embauche)
    {
        $this->container['date_heure_prevue_embauche'] = $date_heure_prevue_embauche;

        return $this;
    }

    /**
     * Gets num_dpae
     *
     * @return string
     */
    public function getNumDpae()
    {
        return $this->container['num_dpae'];
    }

    /**
     * Sets num_dpae
     *
     * @param string $num_dpae num_dpae
     *
     * @return $this
     */
    public function setNumDpae($num_dpae)
    {
        $this->container['num_dpae'] = $num_dpae;

        return $this;
    }

    /**
     * Gets date_envoi
     *
     * @return \DateTime
     */
    public function getDateEnvoi()
    {
        return $this->container['date_envoi'];
    }

    /**
     * Sets date_envoi
     *
     * @param \DateTime $date_envoi date_envoi
     *
     * @return $this
     */
    public function setDateEnvoi($date_envoi)
    {
        $this->container['date_envoi'] = $date_envoi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
